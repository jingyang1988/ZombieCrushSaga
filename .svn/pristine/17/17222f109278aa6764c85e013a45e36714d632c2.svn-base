/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package zombiecrush.data;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Iterator;
/**
 *
 * @author Jing
 */
public class ZombieCrushRecord {
    // HERE ARE ALL THE RECORDS
    private HashMap<String, ZombieCrushLevelRecord> levelRecords;

    /**
     * Default constructor, it simply creates the hash table for
     * storing all the records stored by level.
     */
    public ZombieCrushRecord()
    {
        levelRecords = new HashMap();
}
/**
     * Adds the record for a level
     * 
     * @param levelName
     * 
     * @param rec 
     */
    public void addZombieCrushRecord(String levelName, ZombieCrushLevelRecord rec)
    {
        levelRecords.put(levelName, rec);
    }
     /**
     * This method constructs and fills in a byte array with all the
     * necessary data stored by this object. We do this because writing
     * a byte array all at once to a file is fast. Certainly much faster
     * than writing to a file across many write operations.
     * 
     * @return A byte array filled in with all the data stored in this
     * object, which means all the player records in all the levels.
     * 
     * @throws IOException Note that this method uses a stream that
     * writes to an internal byte array, not a file. So this exception
     * should never happen.
     */
    public byte[] toByteArray() throws IOException
    {
        Iterator<String> keysIt = levelRecords.keySet().iterator();
        int numLevels = levelRecords.keySet().size();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(baos);
        dos.writeInt(numLevels);
        while(keysIt.hasNext())
        {
            String key = keysIt.next();
            dos.writeUTF(key);
            ZombieCrushLevelRecord rec = levelRecords.get(key);
            dos.writeInt(rec.score);
            
        }
        // AND THEN RETURN IT
        return baos.toByteArray();
    }

}
